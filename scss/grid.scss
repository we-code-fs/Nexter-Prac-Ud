button {
  margin-bottom: 3rem;
}
body {
  font-size: 2rem;
}
.container {
  width: 1000px;
  background-color: #eee;
  margin: 2rem auto;

  &__item {
    &--1 {
      background-color: orange;
    }
    &--2 {
      background-color: green;
    }
    &--3 {
      background-color: violet;
    }
    &--4 {
      background-color: pink;
    }
    &--5 {
      background-color: blue;
    }
    &--6 {
      background-color: brown;
    }
    &--7 {
      background-color: gray;
    }
    &--8 {
      background-color: yellow;
    }
  }
}

.container1 {
  display: grid;
  grid-template-rows: 150px 150px;
  //   the code above is equivalent to grid-template-rows: repeat(2, 150px);
  grid-template-columns: repeat(2, 150px) 300px;
  //   the code above is equivalent to grid-template-columns: repeat(3, 150px);

  grid-row-gap: 30px;
  grid-column-gap: 30px;
  //grid-gap: 30px applies for columns and rows
}

.container2 {
  display: grid;
  grid-template-rows: repeat(2, 150px);
  grid-template-columns: repeat(2, 100px) 1fr;
  grid-gap: 20px;
}

.container3 {
  display: grid;
  grid-template-rows: 1fr 5fr;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 20px;
}

.container4 {
  display: grid;
  grid-template-rows: 1fr 5fr;
  grid-template-columns: 50% 1fr 1fr;
  grid-gap: 30px;
}

.container5 {
  display: grid;
  grid-template-rows: 1fr 1fr;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 30px;

  &__item {
    &--1 {
      grid-row-start: 2;
      grid-row-end: 3;

      grid-column-start: 2;
      grid-column-end: 3;

      // The lines above can be summarized with
      // grid-row: 2/3;
      // grid-column: 2/3;
    }
    &--5 {
      grid-row: 1/2;
      grid-column: 3/4;

      // the code above can be summarized with
      // grid-area: line start / column start / line end/ column end;
    }
  }
}

.container6 {
  display: grid;
  grid-template-rows: 1fr 1fr;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 30px;

  &__item {
    &--1 {
      grid-row: 2 / 3;
      grid-column: 2/4;
    }
    // element 2 is covering element 3
    &--2 {
      grid-row: 1/2;
      grid-column: 1/3;

      z-index: 2;
    }

    &--3 {
      grid-row: 1/2;
      grid-column: 2/3;
    }

    &--4 {
      grid-row: 1/3;
      grid-column: 3/4;
    }

    &--6 {
      grid-column: 1 / span 2;
    }
  }
}

.container7 {
  display: grid;
  grid-template-rows: 1fr 2fr 2fr 2fr 1fr;
  grid-template-columns: 1.3fr 1.3fr 1.3fr 1fr;
  grid-gap: 20px;

  &__item {
    &--1 {
      grid-row: 1 / 2;
      grid-column: 1 / -1;
    }

    &--2 {
      grid-row: 2/3;
      grid-column: 1/ 2;
    }
    &--3 {
      grid-row: 2/3;
      grid-column: 2/3;
    }
    &--4 {
      grid-row: 2/3;
      grid-column: 3/4;
    }
    &--5 {
      grid-row: 2 /5;
      grid-column: 4/5;
    }
    &--6 {
      grid-row: 3/5;
      grid-column: 1/4;
    }
    &--7 {
      grid-row: 5/6;
      grid-column: 1/-1;
    }
  }
}

.container8 {
  display: grid;
  //   Naming grid lines
  grid-template-rows: [row1-start] 100px [row1-end row2-start] 150px [row2-end final-row-start] 50px [final-row-end];
  //   The line above represents 3 rows with the heights 100px 150px 50px
  // The default line 1 is called row1-start
  // The default line2 is called row1-end and is called as well row2-start
  //   line3 is called row2-end and final-row-start
  // line4, last line for the 3rd row is called final-row-end
  grid-template-columns: [col1-start] 100px [col1-end col2-start] 1fr [col2-end];

  grid-gap: 30px;

  &__item {
    &--1 {
      grid-row: final-row-start / final-row-end;
      grid-column: col1-start / col2-end;
    }
  }
}

.container9 {
  display: grid;
  grid-template-rows: 100px 100px 150px 50px;
  grid-template-columns: 1fr 100px;

  grid-template-areas:
    "head head"
    "slide side"
    "main side"
    "main side"
    "foot foot";

  &__item {
    &--1 {
      grid-area: head;
    }
    &--2 {
      grid-area: slide;
    }
    &--3 {
      grid-area: side;
    }
    &--4 {
      grid-area: main;
    }
    &--5 {
      grid-area: foot;
    }
  }
}

.container10 {
  display: grid;
  grid-template-rows: 150px 150px;
  grid-template-columns: 1fr 1fr;
  grid-gap: 30px;

  // Since we have 8 items and the grid created is for 4 items, the grid for the created items is called explicit grid
  // The grid added automatically to fit the remaining content is called implicit grid

  // To style the implicit grid we can add some properties
  grid-auto-rows: 80px;
  // The extra items are added as rows and not column because of the property auto-flow which is by default row. Changing this property will change the fill order of the whole grid
  grid-auto-flow: column;
  // grid-auto-column is applied only if the grid-auto-flow was column. the grid-auto-row is the default
  grid-auto-columns: 0.5fr;
}

.container11 {
  display: grid;
  grid-template-rows: repeat(4, 100px);
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 30px;

  // aligning along the column axis (vertically). the default is stretch
  align-items: center;

  // align items across the row axis (horizontally)
  justify-items: center;

  &__item {
    &--4 {
      align-self: start;
      justify-self: start;
    }
  }
}

.container12 {
  height: 1000px;
  display: grid;
  grid-template-rows: repeat(4, 100px);
  grid-template-columns: repeat(2, 250px);
  grid-gap: 30px;

  // ALign hozizontally
  justify-content: center;

  // ALign vertically
  align-content: center;
}

.container13 {
  display: grid;
  grid-template-rows: 150px 150px;
  // max-content gives a width that is maxi;um to the content of the column. It will try to make the column as wide as possible without causing any line breaks
  grid-template-columns: max-content 1fr 1fr max-content;
}

.container14 {
  display: grid;
  // min-content will result in a row with a height minimum to fit the biggest content along this row. because we hae the column min-content. If we had max content instead in the columns, the row will keep on going wider
  grid-template-rows: repeat(2, min-content);
  // min-content gives a width that is equal to the maximum width of 1 element in the cell. For example the word whatever in the yellow cell
  grid-template-columns: min-content 1fr 1fr min-content;
}

.container15 {
  display: grid;
  // min-content and max-content are limitted in application
  // minmax(x,x) funtion take 2 values that CSS insures the content stay between the values specified
  grid-template-rows: repeat(2, minmax(150px, min-content));

  grid-template-columns: max-content 1fr 1fr min-content;
}

.container16 {
  display: grid;
  grid-template-rows: repeat(2, minmax(150px, min-content));
  // auto-fill will create 10 columns, fill the 1st 8 because we have 8 items, and keep 2 empty
  // It created 10 columns because we have a container with a width of 1000px, and we specified 100px after autofill

  // auto-fit does the same creating, but collapsed the last 2 unfilled columns, meaning it only created 8 columns as much as we need with the desired width, and it will keep the remaining space empty. In the next container, benefit of the auto-fit be be displayed
  grid-template-columns: repeat(auto-fill, 100px);
}

.container17 {
  display: grid;
  grid-template-rows: repeat(2, minmax(150px, min-content));

  // auto-fit combined with minmax allow the creation of the required columns, plus fill the container without any blank spaces if available
  // If the width of the screen is not capable of fitting the items respecting the minmum width specified, the items will wrap on another row
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));

  // In case we passed the 2 specified height rows, the implicit grid created, with the extra auto-rows will have the heigh of 150px;
  grid-auto-rows: 150px;
}
